/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.Abogados.Lex.jdbc;

import com.Abogados.Lex.dao.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Date;
import com.Abogados.Lex.dto.*;
import com.Abogados.Lex.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.CallableStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;

public class CreateContratoDaoImpl extends AbstractDAO implements CreateContratoDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/**
	 * Method 'CreateContratoDaoImpl'
	 * 
	 */
	public CreateContratoDaoImpl()
	{
	}

	/**
	 * Method 'CreateContratoDaoImpl'
	 * 
	 * @param userConn
	 */
	public CreateContratoDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/**
	 * Method 'execute'
	 * 
	 * @param param
	 * @throws CreateContratoDaoException
	 */
	public void execute(CreateContratoParam param) throws CreateContratoDaoException
	{
		// declare variables
		final boolean _isConnSupplied = (userConn != null);
		Connection _conn = null;
		CallableStatement _stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			_conn = _isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// create a CallableStatement
			_stmt = _conn.prepareCall( "{call LEX.PKG_CONTRATOS.CREATE_CONTRATO(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)}" );
		
			_stmt.setDate(1, param.getVFinicio()==null ? null : new java.sql.Date( param.getVFinicio().getTime() ) );
			_stmt.setDate(2, param.getVFtermino()==null ? null : new java.sql.Date( param.getVFtermino().getTime() ) );
			_stmt.setLong( 3, param.getVCestado() );
			_stmt.setLong( 4, param.getVDcontrato() );
			_stmt.setLong( 5, param.getVPresupuesto() );
			_stmt.setLong( 6, param.getVAbogado() );
			_stmt.setLong( 7, param.getVPpago() );
			_stmt.setDate(8, param.getVCreado()==null ? null : new java.sql.Date( param.getVCreado().getTime() ) );
			_stmt.setInt( 9, param.getVAabogado() );
			_stmt.setInt( 10, param.getVAcliente() );
			_stmt.setLong( 11, param.getVFpago() );
			_stmt.registerOutParameter( 12, java.sql.Types.NUMERIC);
			_stmt.execute();
			param.setVSalida( _stmt.getInt( 12 ) );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new CreateContratoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(_stmt);
			if (!_isConnSupplied) {
				ResourceManager.close(_conn);
			}
		
		}
		
	}

}
