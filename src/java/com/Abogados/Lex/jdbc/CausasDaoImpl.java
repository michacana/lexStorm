/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.Abogados.Lex.jdbc;

import com.Abogados.Lex.dao.*;
import com.Abogados.Lex.factory.*;
import java.util.Date;
import com.Abogados.Lex.dto.*;
import com.Abogados.Lex.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class CausasDaoImpl extends AbstractDAO implements CausasDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT ID_CAUSA, ROL, FECHA, CARATULA, ID_CONTRATO, ID_TRIBUNAL FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( ID_CAUSA, ROL, FECHA, CARATULA, ID_CONTRATO, ID_TRIBUNAL ) VALUES ( ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET ID_CAUSA = ?, ROL = ?, FECHA = ?, CARATULA = ?, ID_CONTRATO = ?, ID_TRIBUNAL = ? WHERE ID_CAUSA = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE ID_CAUSA = ?";

	/** 
	 * Index of column ID_CAUSA
	 */
	protected static final int COLUMN_ID_CAUSA = 1;

	/** 
	 * Index of column ROL
	 */
	protected static final int COLUMN_ROL = 2;

	/** 
	 * Index of column FECHA
	 */
	protected static final int COLUMN_FECHA = 3;

	/** 
	 * Index of column CARATULA
	 */
	protected static final int COLUMN_CARATULA = 4;

	/** 
	 * Index of column ID_CONTRATO
	 */
	protected static final int COLUMN_ID_CONTRATO = 5;

	/** 
	 * Index of column ID_TRIBUNAL
	 */
	protected static final int COLUMN_ID_TRIBUNAL = 6;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 6;

	/** 
	 * Index of primary-key column ID_CAUSA
	 */
	protected static final int PK_COLUMN_ID_CAUSA = 1;

	/** 
	 * Inserts a new row in the CAUSAS table.
	 */
	public CausasPk insert(Causas dto) throws CausasDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT );
			int index = 1;
			stmt.setLong( index++, dto.getIdCausa() );
			stmt.setString( index++, dto.getRol() );
			stmt.setTimestamp(index++, dto.getFecha()==null ? null : new java.sql.Timestamp( dto.getFecha().getTime() ) );
			stmt.setTimestamp(index++, dto.getCaratula()==null ? null : new java.sql.Timestamp( dto.getCaratula().getTime() ) );
			stmt.setLong( index++, dto.getIdContrato() );
			stmt.setLong( index++, dto.getIdTribunal() );
			System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new CausasDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the CAUSAS table.
	 */
	public void update(CausasPk pk, Causas dto) throws CausasDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setLong( index++, dto.getIdCausa() );
			stmt.setString( index++, dto.getRol() );
			stmt.setTimestamp(index++, dto.getFecha()==null ? null : new java.sql.Timestamp( dto.getFecha().getTime() ) );
			stmt.setTimestamp(index++, dto.getCaratula()==null ? null : new java.sql.Timestamp( dto.getCaratula().getTime() ) );
			stmt.setLong( index++, dto.getIdContrato() );
			stmt.setLong( index++, dto.getIdTribunal() );
			stmt.setLong( 7, pk.getIdCausa() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new CausasDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the CAUSAS table.
	 */
	public void delete(CausasPk pk) throws CausasDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setLong( 1, pk.getIdCausa() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new CausasDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the CAUSAS table that matches the specified primary-key value.
	 */
	public Causas findByPrimaryKey(CausasPk pk) throws CausasDaoException
	{
		return findByPrimaryKey( pk.getIdCausa() );
	}

	/** 
	 * Returns all rows from the CAUSAS table that match the criteria 'ID_CAUSA = :idCausa'.
	 */
	public Causas findByPrimaryKey(long idCausa) throws CausasDaoException
	{
		Causas ret[] = findByDynamicSelect( SQL_SELECT + " WHERE ID_CAUSA = ?", new Object[] {  new Long(idCausa) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the CAUSAS table that match the criteria ''.
	 */
	public Causas[] findAll() throws CausasDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY ID_CAUSA", null );
	}

	/** 
	 * Returns all rows from the CAUSAS table that match the criteria 'ID_CONTRATO = :idContrato'.
	 */
	public Causas[] findByContratos(long idContrato) throws CausasDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_CONTRATO = ?", new Object[] {  new Long(idContrato) } );
	}

	/** 
	 * Returns all rows from the CAUSAS table that match the criteria 'ID_TRIBUNAL = :idTribunal'.
	 */
	public Causas[] findByTribunal(long idTribunal) throws CausasDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_TRIBUNAL = ?", new Object[] {  new Long(idTribunal) } );
	}

	/** 
	 * Returns all rows from the CAUSAS table that match the criteria 'ID_CAUSA = :idCausa'.
	 */
	public Causas[] findWhereIdCausaEquals(long idCausa) throws CausasDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_CAUSA = ? ORDER BY ID_CAUSA", new Object[] {  new Long(idCausa) } );
	}

	/** 
	 * Returns all rows from the CAUSAS table that match the criteria 'ROL = :rol'.
	 */
	public Causas[] findWhereRolEquals(String rol) throws CausasDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ROL = ? ORDER BY ROL", new Object[] { rol } );
	}

	/** 
	 * Returns all rows from the CAUSAS table that match the criteria 'FECHA = :fecha'.
	 */
	public Causas[] findWhereFechaEquals(Date fecha) throws CausasDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FECHA = ? ORDER BY FECHA", new Object[] { fecha==null ? null : new java.sql.Timestamp( fecha.getTime() ) } );
	}

	/** 
	 * Returns all rows from the CAUSAS table that match the criteria 'CARATULA = :caratula'.
	 */
	public Causas[] findWhereCaratulaEquals(Date caratula) throws CausasDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CARATULA = ? ORDER BY CARATULA", new Object[] { caratula==null ? null : new java.sql.Timestamp( caratula.getTime() ) } );
	}

	/** 
	 * Returns all rows from the CAUSAS table that match the criteria 'ID_CONTRATO = :idContrato'.
	 */
	public Causas[] findWhereIdContratoEquals(long idContrato) throws CausasDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_CONTRATO = ? ORDER BY ID_CONTRATO", new Object[] {  new Long(idContrato) } );
	}

	/** 
	 * Returns all rows from the CAUSAS table that match the criteria 'ID_TRIBUNAL = :idTribunal'.
	 */
	public Causas[] findWhereIdTribunalEquals(long idTribunal) throws CausasDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_TRIBUNAL = ? ORDER BY ID_TRIBUNAL", new Object[] {  new Long(idTribunal) } );
	}

	/**
	 * Method 'CausasDaoImpl'
	 * 
	 */
	public CausasDaoImpl()
	{
	}

	/**
	 * Method 'CausasDaoImpl'
	 * 
	 * @param userConn
	 */
	public CausasDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "LEX.CAUSAS";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected Causas fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			Causas dto = new Causas();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected Causas[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Causas dto = new Causas();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		Causas ret[] = new Causas[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(Causas dto, ResultSet rs) throws SQLException
	{
		dto.setIdCausa( rs.getLong( COLUMN_ID_CAUSA ) );
		dto.setRol( rs.getString( COLUMN_ROL ) );
		dto.setFecha( rs.getTimestamp(COLUMN_FECHA ) );
		dto.setCaratula( rs.getTimestamp(COLUMN_CARATULA ) );
		dto.setIdContrato( rs.getLong( COLUMN_ID_CONTRATO ) );
		dto.setIdTribunal( rs.getLong( COLUMN_ID_TRIBUNAL ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(Causas dto)
	{
	}

	/** 
	 * Returns all rows from the CAUSAS table that match the specified arbitrary SQL statement
	 */
	public Causas[] findByDynamicSelect(String sql, Object[] sqlParams) throws CausasDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new CausasDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the CAUSAS table that match the specified arbitrary SQL statement
	 */
	public Causas[] findByDynamicWhere(String sql, Object[] sqlParams) throws CausasDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new CausasDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
