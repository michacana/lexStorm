/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.Abogados.Lex.jdbc;

import com.Abogados.Lex.dao.*;
import com.Abogados.Lex.factory.*;
import java.util.Date;
import com.Abogados.Lex.dto.*;
import com.Abogados.Lex.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class ContratosClientesDaoImpl extends AbstractDAO implements ContratosClientesDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT ID_CONTRATO, ID_USUARIO, ID_EMPRESA, CREADO, MODIFICADO FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( ID_CONTRATO, ID_USUARIO, ID_EMPRESA, CREADO, MODIFICADO ) VALUES ( ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET ID_CONTRATO = ?, ID_USUARIO = ?, ID_EMPRESA = ?, CREADO = ?, MODIFICADO = ? WHERE ID_CONTRATO = ? AND ID_USUARIO = ? AND ID_EMPRESA = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE ID_CONTRATO = ? AND ID_USUARIO = ? AND ID_EMPRESA = ?";

	/** 
	 * Index of column ID_CONTRATO
	 */
	protected static final int COLUMN_ID_CONTRATO = 1;

	/** 
	 * Index of column ID_USUARIO
	 */
	protected static final int COLUMN_ID_USUARIO = 2;

	/** 
	 * Index of column ID_EMPRESA
	 */
	protected static final int COLUMN_ID_EMPRESA = 3;

	/** 
	 * Index of column CREADO
	 */
	protected static final int COLUMN_CREADO = 4;

	/** 
	 * Index of column MODIFICADO
	 */
	protected static final int COLUMN_MODIFICADO = 5;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 5;

	/** 
	 * Index of primary-key column ID_CONTRATO
	 */
	protected static final int PK_COLUMN_ID_CONTRATO = 1;

	/** 
	 * Index of primary-key column ID_USUARIO
	 */
	protected static final int PK_COLUMN_ID_USUARIO = 2;

	/** 
	 * Index of primary-key column ID_EMPRESA
	 */
	protected static final int PK_COLUMN_ID_EMPRESA = 3;

	/** 
	 * Inserts a new row in the CONTRATOS_CLIENTES table.
	 */
	public ContratosClientesPk insert(ContratosClientes dto) throws ContratosClientesDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT );
			int index = 1;
			stmt.setLong( index++, dto.getIdContrato() );
			stmt.setLong( index++, dto.getIdUsuario() );
			stmt.setLong( index++, dto.getIdEmpresa() );
			stmt.setTimestamp(index++, dto.getCreado()==null ? null : new java.sql.Timestamp( dto.getCreado().getTime() ) );
			stmt.setTimestamp(index++, dto.getModificado()==null ? null : new java.sql.Timestamp( dto.getModificado().getTime() ) );
			System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ContratosClientesDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the CONTRATOS_CLIENTES table.
	 */
	public void update(ContratosClientesPk pk, ContratosClientes dto) throws ContratosClientesDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setLong( index++, dto.getIdContrato() );
			stmt.setLong( index++, dto.getIdUsuario() );
			stmt.setLong( index++, dto.getIdEmpresa() );
			stmt.setTimestamp(index++, dto.getCreado()==null ? null : new java.sql.Timestamp( dto.getCreado().getTime() ) );
			stmt.setTimestamp(index++, dto.getModificado()==null ? null : new java.sql.Timestamp( dto.getModificado().getTime() ) );
			stmt.setLong( 6, pk.getIdContrato() );
			stmt.setLong( 7, pk.getIdUsuario() );
			stmt.setLong( 8, pk.getIdEmpresa() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ContratosClientesDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the CONTRATOS_CLIENTES table.
	 */
	public void delete(ContratosClientesPk pk) throws ContratosClientesDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setLong( 1, pk.getIdContrato() );
			stmt.setLong( 2, pk.getIdUsuario() );
			stmt.setLong( 3, pk.getIdEmpresa() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ContratosClientesDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the CONTRATOS_CLIENTES table that matches the specified primary-key value.
	 */
	public ContratosClientes findByPrimaryKey(ContratosClientesPk pk) throws ContratosClientesDaoException
	{
		return findByPrimaryKey( pk.getIdContrato(), pk.getIdUsuario(), pk.getIdEmpresa() );
	}

	/** 
	 * Returns all rows from the CONTRATOS_CLIENTES table that match the criteria 'ID_CONTRATO = :idContrato AND ID_USUARIO = :idUsuario AND ID_EMPRESA = :idEmpresa'.
	 */
	public ContratosClientes findByPrimaryKey(long idContrato, long idUsuario, long idEmpresa) throws ContratosClientesDaoException
	{
		ContratosClientes ret[] = findByDynamicSelect( SQL_SELECT + " WHERE ID_CONTRATO = ? AND ID_USUARIO = ? AND ID_EMPRESA = ?", new Object[] {  new Long(idContrato),  new Long(idUsuario),  new Long(idEmpresa) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the CONTRATOS_CLIENTES table that match the criteria ''.
	 */
	public ContratosClientes[] findAll() throws ContratosClientesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY ID_CONTRATO, ID_USUARIO, ID_EMPRESA", null );
	}

	/** 
	 * Returns all rows from the CONTRATOS_CLIENTES table that match the criteria 'ID_CONTRATO = :idContrato'.
	 */
	public ContratosClientes[] findByContratos(long idContrato) throws ContratosClientesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_CONTRATO = ?", new Object[] {  new Long(idContrato) } );
	}

	/** 
	 * Returns all rows from the CONTRATOS_CLIENTES table that match the criteria 'ID_EMPRESA = :idEmpresa'.
	 */
	public ContratosClientes[] findByEmpresas(long idEmpresa) throws ContratosClientesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_EMPRESA = ?", new Object[] {  new Long(idEmpresa) } );
	}

	/** 
	 * Returns all rows from the CONTRATOS_CLIENTES table that match the criteria 'ID_USUARIO = :idUsuario'.
	 */
	public ContratosClientes[] findByUsuarios(long idUsuario) throws ContratosClientesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_USUARIO = ?", new Object[] {  new Long(idUsuario) } );
	}

	/** 
	 * Returns all rows from the CONTRATOS_CLIENTES table that match the criteria 'ID_CONTRATO = :idContrato'.
	 */
	public ContratosClientes[] findWhereIdContratoEquals(long idContrato) throws ContratosClientesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_CONTRATO = ? ORDER BY ID_CONTRATO", new Object[] {  new Long(idContrato) } );
	}

	/** 
	 * Returns all rows from the CONTRATOS_CLIENTES table that match the criteria 'ID_USUARIO = :idUsuario'.
	 */
	public ContratosClientes[] findWhereIdUsuarioEquals(long idUsuario) throws ContratosClientesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_USUARIO = ? ORDER BY ID_USUARIO", new Object[] {  new Long(idUsuario) } );
	}

	/** 
	 * Returns all rows from the CONTRATOS_CLIENTES table that match the criteria 'ID_EMPRESA = :idEmpresa'.
	 */
	public ContratosClientes[] findWhereIdEmpresaEquals(long idEmpresa) throws ContratosClientesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_EMPRESA = ? ORDER BY ID_EMPRESA", new Object[] {  new Long(idEmpresa) } );
	}

	/** 
	 * Returns all rows from the CONTRATOS_CLIENTES table that match the criteria 'CREADO = :creado'.
	 */
	public ContratosClientes[] findWhereCreadoEquals(Date creado) throws ContratosClientesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CREADO = ? ORDER BY CREADO", new Object[] { creado==null ? null : new java.sql.Timestamp( creado.getTime() ) } );
	}

	/** 
	 * Returns all rows from the CONTRATOS_CLIENTES table that match the criteria 'MODIFICADO = :modificado'.
	 */
	public ContratosClientes[] findWhereModificadoEquals(Date modificado) throws ContratosClientesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE MODIFICADO = ? ORDER BY MODIFICADO", new Object[] { modificado==null ? null : new java.sql.Timestamp( modificado.getTime() ) } );
	}

	/**
	 * Method 'ContratosClientesDaoImpl'
	 * 
	 */
	public ContratosClientesDaoImpl()
	{
	}

	/**
	 * Method 'ContratosClientesDaoImpl'
	 * 
	 * @param userConn
	 */
	public ContratosClientesDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "LEX.CONTRATOS_CLIENTES";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected ContratosClientes fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			ContratosClientes dto = new ContratosClientes();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected ContratosClientes[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			ContratosClientes dto = new ContratosClientes();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		ContratosClientes ret[] = new ContratosClientes[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(ContratosClientes dto, ResultSet rs) throws SQLException
	{
		dto.setIdContrato( rs.getLong( COLUMN_ID_CONTRATO ) );
		dto.setIdUsuario( rs.getLong( COLUMN_ID_USUARIO ) );
		dto.setIdEmpresa( rs.getLong( COLUMN_ID_EMPRESA ) );
		dto.setCreado( rs.getTimestamp(COLUMN_CREADO ) );
		dto.setModificado( rs.getTimestamp(COLUMN_MODIFICADO ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(ContratosClientes dto)
	{
	}

	/** 
	 * Returns all rows from the CONTRATOS_CLIENTES table that match the specified arbitrary SQL statement
	 */
	public ContratosClientes[] findByDynamicSelect(String sql, Object[] sqlParams) throws ContratosClientesDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ContratosClientesDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the CONTRATOS_CLIENTES table that match the specified arbitrary SQL statement
	 */
	public ContratosClientes[] findByDynamicWhere(String sql, Object[] sqlParams) throws ContratosClientesDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ContratosClientesDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
