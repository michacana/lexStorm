/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.Abogados.Lex.jdbc;

import com.Abogados.Lex.dao.*;
import com.Abogados.Lex.factory.*;
import java.util.Date;
import com.Abogados.Lex.dto.*;
import com.Abogados.Lex.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class ContratosDaoImpl extends AbstractDAO implements ContratosDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT ID_CONTRATO, FECHA_INICIO, FECHA_TERMINO, ID_CONTRATO_ESTADO, ID_DETALLE_CONTRATO, ID_PRESUPUESTO, ID_ABOGADO, ID_PLAN_PAGO, CREADO, MODIFICADO, APROBADO_ABOGADO, APROBADO_CLIENTE, ID_FORMA_PAGO FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( ID_CONTRATO, FECHA_INICIO, FECHA_TERMINO, ID_CONTRATO_ESTADO, ID_DETALLE_CONTRATO, ID_PRESUPUESTO, ID_ABOGADO, ID_PLAN_PAGO, CREADO, MODIFICADO, APROBADO_ABOGADO, APROBADO_CLIENTE, ID_FORMA_PAGO ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET ID_CONTRATO = ?, FECHA_INICIO = ?, FECHA_TERMINO = ?, ID_CONTRATO_ESTADO = ?, ID_DETALLE_CONTRATO = ?, ID_PRESUPUESTO = ?, ID_ABOGADO = ?, ID_PLAN_PAGO = ?, CREADO = ?, MODIFICADO = ?, APROBADO_ABOGADO = ?, APROBADO_CLIENTE = ?, ID_FORMA_PAGO = ? WHERE ID_CONTRATO = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE ID_CONTRATO = ?";

	/** 
	 * Index of column ID_CONTRATO
	 */
	protected static final int COLUMN_ID_CONTRATO = 1;

	/** 
	 * Index of column FECHA_INICIO
	 */
	protected static final int COLUMN_FECHA_INICIO = 2;

	/** 
	 * Index of column FECHA_TERMINO
	 */
	protected static final int COLUMN_FECHA_TERMINO = 3;

	/** 
	 * Index of column ID_CONTRATO_ESTADO
	 */
	protected static final int COLUMN_ID_CONTRATO_ESTADO = 4;

	/** 
	 * Index of column ID_DETALLE_CONTRATO
	 */
	protected static final int COLUMN_ID_DETALLE_CONTRATO = 5;

	/** 
	 * Index of column ID_PRESUPUESTO
	 */
	protected static final int COLUMN_ID_PRESUPUESTO = 6;

	/** 
	 * Index of column ID_ABOGADO
	 */
	protected static final int COLUMN_ID_ABOGADO = 7;

	/** 
	 * Index of column ID_PLAN_PAGO
	 */
	protected static final int COLUMN_ID_PLAN_PAGO = 8;

	/** 
	 * Index of column CREADO
	 */
	protected static final int COLUMN_CREADO = 9;

	/** 
	 * Index of column MODIFICADO
	 */
	protected static final int COLUMN_MODIFICADO = 10;

	/** 
	 * Index of column APROBADO_ABOGADO
	 */
	protected static final int COLUMN_APROBADO_ABOGADO = 11;

	/** 
	 * Index of column APROBADO_CLIENTE
	 */
	protected static final int COLUMN_APROBADO_CLIENTE = 12;

	/** 
	 * Index of column ID_FORMA_PAGO
	 */
	protected static final int COLUMN_ID_FORMA_PAGO = 13;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 13;

	/** 
	 * Index of primary-key column ID_CONTRATO
	 */
	protected static final int PK_COLUMN_ID_CONTRATO = 1;

	/** 
	 * Inserts a new row in the CONTRATOS table.
	 */
	public ContratosPk insert(Contratos dto) throws ContratosDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT );
			int index = 1;
			stmt.setLong( index++, dto.getIdContrato() );
			stmt.setTimestamp(index++, dto.getFechaInicio()==null ? null : new java.sql.Timestamp( dto.getFechaInicio().getTime() ) );
			stmt.setTimestamp(index++, dto.getFechaTermino()==null ? null : new java.sql.Timestamp( dto.getFechaTermino().getTime() ) );
			stmt.setLong( index++, dto.getIdContratoEstado() );
			stmt.setLong( index++, dto.getIdDetalleContrato() );
			if (dto.isIdPresupuestoNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setLong( index++, dto.getIdPresupuesto() );
			}
		
			if (dto.isIdAbogadoNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setLong( index++, dto.getIdAbogado() );
			}
		
			if (dto.isIdPlanPagoNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setLong( index++, dto.getIdPlanPago() );
			}
		
			stmt.setTimestamp(index++, dto.getCreado()==null ? null : new java.sql.Timestamp( dto.getCreado().getTime() ) );
			stmt.setTimestamp(index++, dto.getModificado()==null ? null : new java.sql.Timestamp( dto.getModificado().getTime() ) );
			stmt.setInt( index++, dto.getAprobadoAbogado() );
			stmt.setInt( index++, dto.getAprobadoCliente() );
			stmt.setLong( index++, dto.getIdFormaPago() );
			System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ContratosDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the CONTRATOS table.
	 */
	public void update(ContratosPk pk, Contratos dto) throws ContratosDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setLong( index++, dto.getIdContrato() );
			stmt.setTimestamp(index++, dto.getFechaInicio()==null ? null : new java.sql.Timestamp( dto.getFechaInicio().getTime() ) );
			stmt.setTimestamp(index++, dto.getFechaTermino()==null ? null : new java.sql.Timestamp( dto.getFechaTermino().getTime() ) );
			stmt.setLong( index++, dto.getIdContratoEstado() );
			stmt.setLong( index++, dto.getIdDetalleContrato() );
			if (dto.isIdPresupuestoNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setLong( index++, dto.getIdPresupuesto() );
			}
		
			if (dto.isIdAbogadoNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setLong( index++, dto.getIdAbogado() );
			}
		
			if (dto.isIdPlanPagoNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setLong( index++, dto.getIdPlanPago() );
			}
		
			stmt.setTimestamp(index++, dto.getCreado()==null ? null : new java.sql.Timestamp( dto.getCreado().getTime() ) );
			stmt.setTimestamp(index++, dto.getModificado()==null ? null : new java.sql.Timestamp( dto.getModificado().getTime() ) );
			stmt.setInt( index++, dto.getAprobadoAbogado() );
			stmt.setInt( index++, dto.getAprobadoCliente() );
			stmt.setLong( index++, dto.getIdFormaPago() );
			stmt.setLong( 14, pk.getIdContrato() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ContratosDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the CONTRATOS table.
	 */
	public void delete(ContratosPk pk) throws ContratosDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setLong( 1, pk.getIdContrato() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ContratosDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the CONTRATOS table that matches the specified primary-key value.
	 */
	public Contratos findByPrimaryKey(ContratosPk pk) throws ContratosDaoException
	{
		return findByPrimaryKey( pk.getIdContrato() );
	}

	/** 
	 * Returns all rows from the CONTRATOS table that match the criteria 'ID_CONTRATO = :idContrato'.
	 */
	public Contratos findByPrimaryKey(long idContrato) throws ContratosDaoException
	{
		Contratos ret[] = findByDynamicSelect( SQL_SELECT + " WHERE ID_CONTRATO = ?", new Object[] {  new Long(idContrato) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the CONTRATOS table that match the criteria ''.
	 */
	public Contratos[] findAll() throws ContratosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY ID_CONTRATO", null );
	}

	/** 
	 * Returns all rows from the CONTRATOS table that match the criteria 'ID_DETALLE_CONTRATO = :idDetalleContrato'.
	 */
	public Contratos[] findByContratoDetalles(long idDetalleContrato) throws ContratosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_DETALLE_CONTRATO = ?", new Object[] {  new Long(idDetalleContrato) } );
	}

	/** 
	 * Returns all rows from the CONTRATOS table that match the criteria 'ID_CONTRATO_ESTADO = :idContratoEstado'.
	 */
	public Contratos[] findByContratoEstados(long idContratoEstado) throws ContratosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_CONTRATO_ESTADO = ?", new Object[] {  new Long(idContratoEstado) } );
	}

	/** 
	 * Returns all rows from the CONTRATOS table that match the criteria 'ID_FORMA_PAGO = :idFormaPago'.
	 */
	public Contratos[] findByFormaPago(long idFormaPago) throws ContratosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_FORMA_PAGO = ?", new Object[] {  new Long(idFormaPago) } );
	}

	/** 
	 * Returns all rows from the CONTRATOS table that match the criteria 'ID_PLAN_PAGO = :idPlanPago'.
	 */
	public Contratos[] findByPlanPago(long idPlanPago) throws ContratosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_PLAN_PAGO = ?", new Object[] {  new Long(idPlanPago) } );
	}

	/** 
	 * Returns all rows from the CONTRATOS table that match the criteria 'ID_PRESUPUESTO = :idPresupuesto'.
	 */
	public Contratos[] findByPresupuestos(long idPresupuesto) throws ContratosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_PRESUPUESTO = ?", new Object[] {  new Long(idPresupuesto) } );
	}

	/** 
	 * Returns all rows from the CONTRATOS table that match the criteria 'ID_ABOGADO = :idAbogado'.
	 */
	public Contratos[] findByUsuarios(long idAbogado) throws ContratosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_ABOGADO = ?", new Object[] {  new Long(idAbogado) } );
	}

	/** 
	 * Returns all rows from the CONTRATOS table that match the criteria 'ID_CONTRATO = :idContrato'.
	 */
	public Contratos[] findWhereIdContratoEquals(long idContrato) throws ContratosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_CONTRATO = ? ORDER BY ID_CONTRATO", new Object[] {  new Long(idContrato) } );
	}

	/** 
	 * Returns all rows from the CONTRATOS table that match the criteria 'FECHA_INICIO = :fechaInicio'.
	 */
	public Contratos[] findWhereFechaInicioEquals(Date fechaInicio) throws ContratosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FECHA_INICIO = ? ORDER BY FECHA_INICIO", new Object[] { fechaInicio==null ? null : new java.sql.Timestamp( fechaInicio.getTime() ) } );
	}

	/** 
	 * Returns all rows from the CONTRATOS table that match the criteria 'FECHA_TERMINO = :fechaTermino'.
	 */
	public Contratos[] findWhereFechaTerminoEquals(Date fechaTermino) throws ContratosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FECHA_TERMINO = ? ORDER BY FECHA_TERMINO", new Object[] { fechaTermino==null ? null : new java.sql.Timestamp( fechaTermino.getTime() ) } );
	}

	/** 
	 * Returns all rows from the CONTRATOS table that match the criteria 'ID_CONTRATO_ESTADO = :idContratoEstado'.
	 */
	public Contratos[] findWhereIdContratoEstadoEquals(long idContratoEstado) throws ContratosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_CONTRATO_ESTADO = ? ORDER BY ID_CONTRATO_ESTADO", new Object[] {  new Long(idContratoEstado) } );
	}

	/** 
	 * Returns all rows from the CONTRATOS table that match the criteria 'ID_DETALLE_CONTRATO = :idDetalleContrato'.
	 */
	public Contratos[] findWhereIdDetalleContratoEquals(long idDetalleContrato) throws ContratosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_DETALLE_CONTRATO = ? ORDER BY ID_DETALLE_CONTRATO", new Object[] {  new Long(idDetalleContrato) } );
	}

	/** 
	 * Returns all rows from the CONTRATOS table that match the criteria 'ID_PRESUPUESTO = :idPresupuesto'.
	 */
	public Contratos[] findWhereIdPresupuestoEquals(long idPresupuesto) throws ContratosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_PRESUPUESTO = ? ORDER BY ID_PRESUPUESTO", new Object[] {  new Long(idPresupuesto) } );
	}

	/** 
	 * Returns all rows from the CONTRATOS table that match the criteria 'ID_ABOGADO = :idAbogado'.
	 */
	public Contratos[] findWhereIdAbogadoEquals(long idAbogado) throws ContratosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_ABOGADO = ? ORDER BY ID_ABOGADO", new Object[] {  new Long(idAbogado) } );
	}

	/** 
	 * Returns all rows from the CONTRATOS table that match the criteria 'ID_PLAN_PAGO = :idPlanPago'.
	 */
	public Contratos[] findWhereIdPlanPagoEquals(long idPlanPago) throws ContratosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_PLAN_PAGO = ? ORDER BY ID_PLAN_PAGO", new Object[] {  new Long(idPlanPago) } );
	}

	/** 
	 * Returns all rows from the CONTRATOS table that match the criteria 'CREADO = :creado'.
	 */
	public Contratos[] findWhereCreadoEquals(Date creado) throws ContratosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CREADO = ? ORDER BY CREADO", new Object[] { creado==null ? null : new java.sql.Timestamp( creado.getTime() ) } );
	}

	/** 
	 * Returns all rows from the CONTRATOS table that match the criteria 'MODIFICADO = :modificado'.
	 */
	public Contratos[] findWhereModificadoEquals(Date modificado) throws ContratosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE MODIFICADO = ? ORDER BY MODIFICADO", new Object[] { modificado==null ? null : new java.sql.Timestamp( modificado.getTime() ) } );
	}

	/** 
	 * Returns all rows from the CONTRATOS table that match the criteria 'APROBADO_ABOGADO = :aprobadoAbogado'.
	 */
	public Contratos[] findWhereAprobadoAbogadoEquals(int aprobadoAbogado) throws ContratosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE APROBADO_ABOGADO = ? ORDER BY APROBADO_ABOGADO", new Object[] {  new Integer(aprobadoAbogado) } );
	}

	/** 
	 * Returns all rows from the CONTRATOS table that match the criteria 'APROBADO_CLIENTE = :aprobadoCliente'.
	 */
	public Contratos[] findWhereAprobadoClienteEquals(int aprobadoCliente) throws ContratosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE APROBADO_CLIENTE = ? ORDER BY APROBADO_CLIENTE", new Object[] {  new Integer(aprobadoCliente) } );
	}

	/** 
	 * Returns all rows from the CONTRATOS table that match the criteria 'ID_FORMA_PAGO = :idFormaPago'.
	 */
	public Contratos[] findWhereIdFormaPagoEquals(long idFormaPago) throws ContratosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_FORMA_PAGO = ? ORDER BY ID_FORMA_PAGO", new Object[] {  new Long(idFormaPago) } );
	}

	/**
	 * Method 'ContratosDaoImpl'
	 * 
	 */
	public ContratosDaoImpl()
	{
	}

	/**
	 * Method 'ContratosDaoImpl'
	 * 
	 * @param userConn
	 */
	public ContratosDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "LEX.CONTRATOS";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected Contratos fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			Contratos dto = new Contratos();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected Contratos[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Contratos dto = new Contratos();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		Contratos ret[] = new Contratos[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(Contratos dto, ResultSet rs) throws SQLException
	{
		dto.setIdContrato( rs.getLong( COLUMN_ID_CONTRATO ) );
		dto.setFechaInicio( rs.getTimestamp(COLUMN_FECHA_INICIO ) );
		dto.setFechaTermino( rs.getTimestamp(COLUMN_FECHA_TERMINO ) );
		dto.setIdContratoEstado( rs.getLong( COLUMN_ID_CONTRATO_ESTADO ) );
		dto.setIdDetalleContrato( rs.getLong( COLUMN_ID_DETALLE_CONTRATO ) );
		dto.setIdPresupuesto( rs.getLong( COLUMN_ID_PRESUPUESTO ) );
		if (rs.wasNull()) {
			dto.setIdPresupuestoNull( true );
		}
		
		dto.setIdAbogado( rs.getLong( COLUMN_ID_ABOGADO ) );
		if (rs.wasNull()) {
			dto.setIdAbogadoNull( true );
		}
		
		dto.setIdPlanPago( rs.getLong( COLUMN_ID_PLAN_PAGO ) );
		if (rs.wasNull()) {
			dto.setIdPlanPagoNull( true );
		}
		
		dto.setCreado( rs.getTimestamp(COLUMN_CREADO ) );
		dto.setModificado( rs.getTimestamp(COLUMN_MODIFICADO ) );
		dto.setAprobadoAbogado( rs.getInt( COLUMN_APROBADO_ABOGADO ) );
		dto.setAprobadoCliente( rs.getInt( COLUMN_APROBADO_CLIENTE ) );
		dto.setIdFormaPago( rs.getLong( COLUMN_ID_FORMA_PAGO ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(Contratos dto)
	{
	}

	/** 
	 * Returns all rows from the CONTRATOS table that match the specified arbitrary SQL statement
	 */
	public Contratos[] findByDynamicSelect(String sql, Object[] sqlParams) throws ContratosDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ContratosDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the CONTRATOS table that match the specified arbitrary SQL statement
	 */
	public Contratos[] findByDynamicWhere(String sql, Object[] sqlParams) throws ContratosDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ContratosDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
