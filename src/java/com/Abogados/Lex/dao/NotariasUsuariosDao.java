/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.Abogados.Lex.dao;

import com.Abogados.Lex.dto.*;
import com.Abogados.Lex.exceptions.*;

public interface NotariasUsuariosDao
{
	/** 
	 * Inserts a new row in the NOTARIAS_USUARIOS table.
	 */
	public NotariasUsuariosPk insert(NotariasUsuarios dto) throws NotariasUsuariosDaoException;

	/** 
	 * Updates a single row in the NOTARIAS_USUARIOS table.
	 */
	public void update(NotariasUsuariosPk pk, NotariasUsuarios dto) throws NotariasUsuariosDaoException;

	/** 
	 * Deletes a single row in the NOTARIAS_USUARIOS table.
	 */
	public void delete(NotariasUsuariosPk pk) throws NotariasUsuariosDaoException;

	/** 
	 * Returns the rows from the NOTARIAS_USUARIOS table that matches the specified primary-key value.
	 */
	public NotariasUsuarios findByPrimaryKey(NotariasUsuariosPk pk) throws NotariasUsuariosDaoException;

	/** 
	 * Returns all rows from the NOTARIAS_USUARIOS table that match the criteria 'ID_NOTARIA = :idNotaria AND ID_USUARIO = :idUsuario'.
	 */
	public NotariasUsuarios findByPrimaryKey(long idNotaria, long idUsuario) throws NotariasUsuariosDaoException;

	/** 
	 * Returns all rows from the NOTARIAS_USUARIOS table that match the criteria ''.
	 */
	public NotariasUsuarios[] findAll() throws NotariasUsuariosDaoException;

	/** 
	 * Returns all rows from the NOTARIAS_USUARIOS table that match the criteria 'ID_NOTARIA = :idNotaria'.
	 */
	public NotariasUsuarios[] findByNotarias(long idNotaria) throws NotariasUsuariosDaoException;

	/** 
	 * Returns all rows from the NOTARIAS_USUARIOS table that match the criteria 'ID_USUARIO = :idUsuario'.
	 */
	public NotariasUsuarios[] findByUsuarios(long idUsuario) throws NotariasUsuariosDaoException;

	/** 
	 * Returns all rows from the NOTARIAS_USUARIOS table that match the criteria 'ID_NOTARIA = :idNotaria'.
	 */
	public NotariasUsuarios[] findWhereIdNotariaEquals(long idNotaria) throws NotariasUsuariosDaoException;

	/** 
	 * Returns all rows from the NOTARIAS_USUARIOS table that match the criteria 'ID_USUARIO = :idUsuario'.
	 */
	public NotariasUsuarios[] findWhereIdUsuarioEquals(long idUsuario) throws NotariasUsuariosDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the NOTARIAS_USUARIOS table that match the specified arbitrary SQL statement
	 */
	public NotariasUsuarios[] findByDynamicSelect(String sql, Object[] sqlParams) throws NotariasUsuariosDaoException;

	/** 
	 * Returns all rows from the NOTARIAS_USUARIOS table that match the specified arbitrary SQL statement
	 */
	public NotariasUsuarios[] findByDynamicWhere(String sql, Object[] sqlParams) throws NotariasUsuariosDaoException;

}
