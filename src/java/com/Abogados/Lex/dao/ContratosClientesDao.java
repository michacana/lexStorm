/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.Abogados.Lex.dao;

import java.util.Date;
import com.Abogados.Lex.dto.*;
import com.Abogados.Lex.exceptions.*;

public interface ContratosClientesDao
{
	/** 
	 * Inserts a new row in the CONTRATOS_CLIENTES table.
	 */
	public ContratosClientesPk insert(ContratosClientes dto) throws ContratosClientesDaoException;

	/** 
	 * Updates a single row in the CONTRATOS_CLIENTES table.
	 */
	public void update(ContratosClientesPk pk, ContratosClientes dto) throws ContratosClientesDaoException;

	/** 
	 * Deletes a single row in the CONTRATOS_CLIENTES table.
	 */
	public void delete(ContratosClientesPk pk) throws ContratosClientesDaoException;

	/** 
	 * Returns the rows from the CONTRATOS_CLIENTES table that matches the specified primary-key value.
	 */
	public ContratosClientes findByPrimaryKey(ContratosClientesPk pk) throws ContratosClientesDaoException;

	/** 
	 * Returns all rows from the CONTRATOS_CLIENTES table that match the criteria 'ID_CONTRATO = :idContrato AND ID_USUARIO = :idUsuario AND ID_EMPRESA = :idEmpresa'.
	 */
	public ContratosClientes findByPrimaryKey(long idContrato, long idUsuario, long idEmpresa) throws ContratosClientesDaoException;

	/** 
	 * Returns all rows from the CONTRATOS_CLIENTES table that match the criteria ''.
	 */
	public ContratosClientes[] findAll() throws ContratosClientesDaoException;

	/** 
	 * Returns all rows from the CONTRATOS_CLIENTES table that match the criteria 'ID_CONTRATO = :idContrato'.
	 */
	public ContratosClientes[] findByContratos(long idContrato) throws ContratosClientesDaoException;

	/** 
	 * Returns all rows from the CONTRATOS_CLIENTES table that match the criteria 'ID_EMPRESA = :idEmpresa'.
	 */
	public ContratosClientes[] findByEmpresas(long idEmpresa) throws ContratosClientesDaoException;

	/** 
	 * Returns all rows from the CONTRATOS_CLIENTES table that match the criteria 'ID_USUARIO = :idUsuario'.
	 */
	public ContratosClientes[] findByUsuarios(long idUsuario) throws ContratosClientesDaoException;

	/** 
	 * Returns all rows from the CONTRATOS_CLIENTES table that match the criteria 'ID_CONTRATO = :idContrato'.
	 */
	public ContratosClientes[] findWhereIdContratoEquals(long idContrato) throws ContratosClientesDaoException;

	/** 
	 * Returns all rows from the CONTRATOS_CLIENTES table that match the criteria 'ID_USUARIO = :idUsuario'.
	 */
	public ContratosClientes[] findWhereIdUsuarioEquals(long idUsuario) throws ContratosClientesDaoException;

	/** 
	 * Returns all rows from the CONTRATOS_CLIENTES table that match the criteria 'ID_EMPRESA = :idEmpresa'.
	 */
	public ContratosClientes[] findWhereIdEmpresaEquals(long idEmpresa) throws ContratosClientesDaoException;

	/** 
	 * Returns all rows from the CONTRATOS_CLIENTES table that match the criteria 'CREADO = :creado'.
	 */
	public ContratosClientes[] findWhereCreadoEquals(Date creado) throws ContratosClientesDaoException;

	/** 
	 * Returns all rows from the CONTRATOS_CLIENTES table that match the criteria 'MODIFICADO = :modificado'.
	 */
	public ContratosClientes[] findWhereModificadoEquals(Date modificado) throws ContratosClientesDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the CONTRATOS_CLIENTES table that match the specified arbitrary SQL statement
	 */
	public ContratosClientes[] findByDynamicSelect(String sql, Object[] sqlParams) throws ContratosClientesDaoException;

	/** 
	 * Returns all rows from the CONTRATOS_CLIENTES table that match the specified arbitrary SQL statement
	 */
	public ContratosClientes[] findByDynamicWhere(String sql, Object[] sqlParams) throws ContratosClientesDaoException;

}
