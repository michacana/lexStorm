/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.Abogados.Lex.dao;

import java.util.Date;
import com.Abogados.Lex.dto.*;
import com.Abogados.Lex.exceptions.*;

public interface DocumentosCitasDao
{
	/** 
	 * Inserts a new row in the DOCUMENTOS_CITAS table.
	 */
	public DocumentosCitasPk insert(DocumentosCitas dto) throws DocumentosCitasDaoException;

	/** 
	 * Updates a single row in the DOCUMENTOS_CITAS table.
	 */
	public void update(DocumentosCitasPk pk, DocumentosCitas dto) throws DocumentosCitasDaoException;

	/** 
	 * Deletes a single row in the DOCUMENTOS_CITAS table.
	 */
	public void delete(DocumentosCitasPk pk) throws DocumentosCitasDaoException;

	/** 
	 * Returns the rows from the DOCUMENTOS_CITAS table that matches the specified primary-key value.
	 */
	public DocumentosCitas findByPrimaryKey(DocumentosCitasPk pk) throws DocumentosCitasDaoException;

	/** 
	 * Returns all rows from the DOCUMENTOS_CITAS table that match the criteria 'ID_CITA = :idCita'.
	 */
	public DocumentosCitas findByPrimaryKey(long idCita) throws DocumentosCitasDaoException;

	/** 
	 * Returns all rows from the DOCUMENTOS_CITAS table that match the criteria ''.
	 */
	public DocumentosCitas[] findAll() throws DocumentosCitasDaoException;

	/** 
	 * Returns all rows from the DOCUMENTOS_CITAS table that match the criteria 'ID_CITA = :idCita'.
	 */
	public DocumentosCitas[] findByCitas(long idCita) throws DocumentosCitasDaoException;

	/** 
	 * Returns all rows from the DOCUMENTOS_CITAS table that match the criteria 'ID_ESTADO_DOC = :idEstadoDoc'.
	 */
	public DocumentosCitas[] findByDocEstados(long idEstadoDoc) throws DocumentosCitasDaoException;

	/** 
	 * Returns all rows from the DOCUMENTOS_CITAS table that match the criteria 'ID_DOCUMENTO = :idDocumento'.
	 */
	public DocumentosCitas[] findByDocumentos(long idDocumento) throws DocumentosCitasDaoException;

	/** 
	 * Returns all rows from the DOCUMENTOS_CITAS table that match the criteria 'ID_CITA = :idCita'.
	 */
	public DocumentosCitas[] findWhereIdCitaEquals(long idCita) throws DocumentosCitasDaoException;

	/** 
	 * Returns all rows from the DOCUMENTOS_CITAS table that match the criteria 'ID_DOCUMENTO = :idDocumento'.
	 */
	public DocumentosCitas[] findWhereIdDocumentoEquals(long idDocumento) throws DocumentosCitasDaoException;

	/** 
	 * Returns all rows from the DOCUMENTOS_CITAS table that match the criteria 'ID_ESTADO_DOC = :idEstadoDoc'.
	 */
	public DocumentosCitas[] findWhereIdEstadoDocEquals(long idEstadoDoc) throws DocumentosCitasDaoException;

	/** 
	 * Returns all rows from the DOCUMENTOS_CITAS table that match the criteria 'CREADO = :creado'.
	 */
	public DocumentosCitas[] findWhereCreadoEquals(Date creado) throws DocumentosCitasDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the DOCUMENTOS_CITAS table that match the specified arbitrary SQL statement
	 */
	public DocumentosCitas[] findByDynamicSelect(String sql, Object[] sqlParams) throws DocumentosCitasDaoException;

	/** 
	 * Returns all rows from the DOCUMENTOS_CITAS table that match the specified arbitrary SQL statement
	 */
	public DocumentosCitas[] findByDynamicWhere(String sql, Object[] sqlParams) throws DocumentosCitasDaoException;

}
