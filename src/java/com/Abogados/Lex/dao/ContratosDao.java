/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.Abogados.Lex.dao;

import java.util.Date;
import com.Abogados.Lex.dto.*;
import com.Abogados.Lex.exceptions.*;

public interface ContratosDao
{
	/** 
	 * Inserts a new row in the CONTRATOS table.
	 */
	public ContratosPk insert(Contratos dto) throws ContratosDaoException;

	/** 
	 * Updates a single row in the CONTRATOS table.
	 */
	public void update(ContratosPk pk, Contratos dto) throws ContratosDaoException;

	/** 
	 * Deletes a single row in the CONTRATOS table.
	 */
	public void delete(ContratosPk pk) throws ContratosDaoException;

	/** 
	 * Returns the rows from the CONTRATOS table that matches the specified primary-key value.
	 */
	public Contratos findByPrimaryKey(ContratosPk pk) throws ContratosDaoException;

	/** 
	 * Returns all rows from the CONTRATOS table that match the criteria 'ID_CONTRATO = :idContrato'.
	 */
	public Contratos findByPrimaryKey(long idContrato) throws ContratosDaoException;

	/** 
	 * Returns all rows from the CONTRATOS table that match the criteria ''.
	 */
	public Contratos[] findAll() throws ContratosDaoException;

	/** 
	 * Returns all rows from the CONTRATOS table that match the criteria 'ID_DETALLE_CONTRATO = :idDetalleContrato'.
	 */
	public Contratos[] findByContratoDetalles(long idDetalleContrato) throws ContratosDaoException;

	/** 
	 * Returns all rows from the CONTRATOS table that match the criteria 'ID_CONTRATO_ESTADO = :idContratoEstado'.
	 */
	public Contratos[] findByContratoEstados(long idContratoEstado) throws ContratosDaoException;

	/** 
	 * Returns all rows from the CONTRATOS table that match the criteria 'ID_FORMA_PAGO = :idFormaPago'.
	 */
	public Contratos[] findByFormaPago(long idFormaPago) throws ContratosDaoException;

	/** 
	 * Returns all rows from the CONTRATOS table that match the criteria 'ID_PLAN_PAGO = :idPlanPago'.
	 */
	public Contratos[] findByPlanPago(long idPlanPago) throws ContratosDaoException;

	/** 
	 * Returns all rows from the CONTRATOS table that match the criteria 'ID_PRESUPUESTO = :idPresupuesto'.
	 */
	public Contratos[] findByPresupuestos(long idPresupuesto) throws ContratosDaoException;

	/** 
	 * Returns all rows from the CONTRATOS table that match the criteria 'ID_ABOGADO = :idAbogado'.
	 */
	public Contratos[] findByUsuarios(long idAbogado) throws ContratosDaoException;

	/** 
	 * Returns all rows from the CONTRATOS table that match the criteria 'ID_CONTRATO = :idContrato'.
	 */
	public Contratos[] findWhereIdContratoEquals(long idContrato) throws ContratosDaoException;

	/** 
	 * Returns all rows from the CONTRATOS table that match the criteria 'FECHA_INICIO = :fechaInicio'.
	 */
	public Contratos[] findWhereFechaInicioEquals(Date fechaInicio) throws ContratosDaoException;

	/** 
	 * Returns all rows from the CONTRATOS table that match the criteria 'FECHA_TERMINO = :fechaTermino'.
	 */
	public Contratos[] findWhereFechaTerminoEquals(Date fechaTermino) throws ContratosDaoException;

	/** 
	 * Returns all rows from the CONTRATOS table that match the criteria 'ID_CONTRATO_ESTADO = :idContratoEstado'.
	 */
	public Contratos[] findWhereIdContratoEstadoEquals(long idContratoEstado) throws ContratosDaoException;

	/** 
	 * Returns all rows from the CONTRATOS table that match the criteria 'ID_DETALLE_CONTRATO = :idDetalleContrato'.
	 */
	public Contratos[] findWhereIdDetalleContratoEquals(long idDetalleContrato) throws ContratosDaoException;

	/** 
	 * Returns all rows from the CONTRATOS table that match the criteria 'ID_PRESUPUESTO = :idPresupuesto'.
	 */
	public Contratos[] findWhereIdPresupuestoEquals(long idPresupuesto) throws ContratosDaoException;

	/** 
	 * Returns all rows from the CONTRATOS table that match the criteria 'ID_ABOGADO = :idAbogado'.
	 */
	public Contratos[] findWhereIdAbogadoEquals(long idAbogado) throws ContratosDaoException;

	/** 
	 * Returns all rows from the CONTRATOS table that match the criteria 'ID_PLAN_PAGO = :idPlanPago'.
	 */
	public Contratos[] findWhereIdPlanPagoEquals(long idPlanPago) throws ContratosDaoException;

	/** 
	 * Returns all rows from the CONTRATOS table that match the criteria 'CREADO = :creado'.
	 */
	public Contratos[] findWhereCreadoEquals(Date creado) throws ContratosDaoException;

	/** 
	 * Returns all rows from the CONTRATOS table that match the criteria 'MODIFICADO = :modificado'.
	 */
	public Contratos[] findWhereModificadoEquals(Date modificado) throws ContratosDaoException;

	/** 
	 * Returns all rows from the CONTRATOS table that match the criteria 'APROBADO_ABOGADO = :aprobadoAbogado'.
	 */
	public Contratos[] findWhereAprobadoAbogadoEquals(int aprobadoAbogado) throws ContratosDaoException;

	/** 
	 * Returns all rows from the CONTRATOS table that match the criteria 'APROBADO_CLIENTE = :aprobadoCliente'.
	 */
	public Contratos[] findWhereAprobadoClienteEquals(int aprobadoCliente) throws ContratosDaoException;

	/** 
	 * Returns all rows from the CONTRATOS table that match the criteria 'ID_FORMA_PAGO = :idFormaPago'.
	 */
	public Contratos[] findWhereIdFormaPagoEquals(long idFormaPago) throws ContratosDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the CONTRATOS table that match the specified arbitrary SQL statement
	 */
	public Contratos[] findByDynamicSelect(String sql, Object[] sqlParams) throws ContratosDaoException;

	/** 
	 * Returns all rows from the CONTRATOS table that match the specified arbitrary SQL statement
	 */
	public Contratos[] findByDynamicWhere(String sql, Object[] sqlParams) throws ContratosDaoException;

}
