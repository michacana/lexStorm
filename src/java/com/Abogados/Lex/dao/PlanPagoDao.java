/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.Abogados.Lex.dao;

import com.Abogados.Lex.dto.*;
import com.Abogados.Lex.exceptions.*;

public interface PlanPagoDao
{
	/** 
	 * Inserts a new row in the PLAN_PAGO table.
	 */
	public PlanPagoPk insert(PlanPago dto) throws PlanPagoDaoException;

	/** 
	 * Updates a single row in the PLAN_PAGO table.
	 */
	public void update(PlanPagoPk pk, PlanPago dto) throws PlanPagoDaoException;

	/** 
	 * Deletes a single row in the PLAN_PAGO table.
	 */
	public void delete(PlanPagoPk pk) throws PlanPagoDaoException;

	/** 
	 * Returns the rows from the PLAN_PAGO table that matches the specified primary-key value.
	 */
	public PlanPago findByPrimaryKey(PlanPagoPk pk) throws PlanPagoDaoException;

	/** 
	 * Returns all rows from the PLAN_PAGO table that match the criteria 'ID_PLAN_PAGO = :idPlanPago'.
	 */
	public PlanPago findByPrimaryKey(long idPlanPago) throws PlanPagoDaoException;

	/** 
	 * Returns all rows from the PLAN_PAGO table that match the criteria ''.
	 */
	public PlanPago[] findAll() throws PlanPagoDaoException;

	/** 
	 * Returns all rows from the PLAN_PAGO table that match the criteria 'ID_PLAN_PAGO = :idPlanPago'.
	 */
	public PlanPago[] findWhereIdPlanPagoEquals(long idPlanPago) throws PlanPagoDaoException;

	/** 
	 * Returns all rows from the PLAN_PAGO table that match the criteria 'NOMBRE = :nombre'.
	 */
	public PlanPago[] findWhereNombreEquals(String nombre) throws PlanPagoDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the PLAN_PAGO table that match the specified arbitrary SQL statement
	 */
	public PlanPago[] findByDynamicSelect(String sql, Object[] sqlParams) throws PlanPagoDaoException;

	/** 
	 * Returns all rows from the PLAN_PAGO table that match the specified arbitrary SQL statement
	 */
	public PlanPago[] findByDynamicWhere(String sql, Object[] sqlParams) throws PlanPagoDaoException;

}
